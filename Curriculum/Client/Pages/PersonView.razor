@page "/person"
@inject HttpClient client

<h3>Person</h3>

<hr />

<EditForm Model="person" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <Alert Result="@result"></Alert>

    <div class="form-group row">
        <label for="Id" class="col-2 col-form-label">Id</label>
        <div class="col-10">
            <InputNumber @bind-Value="person.Id" placeholder="Person's id generated by the system" class="form-control" readonly="readonly"></InputNumber>
            <ValidationMessage For="@(() => person.Id)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Name" class="col-2 col-form-label">Name</label>
        <div class="col-10">
            <InputText @bind-Value="person.Name" placeholder="Complete person's name" class="form-control"></InputText>
            <ValidationMessage For="@(() => person.Name)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="BirthDate" class="col-2 col-form-label">Birth Date</label>
        <div class="col-10">
            <InputDate @bind-Value="person.BirthDate" format-value="dd/MM/yyyy" placeholder="Birth Date" class="form-control"></InputDate>
            <ValidationMessage For="@(() => person.BirthDate)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Email" class="col-2 col-form-label">Email</label>
        <div class="col-10">
            <InputText @bind-Value="person.Email" placeholder="Personal primary email" class="form-control"></InputText>
            <ValidationMessage For="@(() => person.Email)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="offset-2 col-10">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
    </div>
</EditForm>

<Spinner Loading="loading"></Spinner>

@code {
    Person person = new Person();
    Result<Person> result = new Result<Person>();
    bool loading = false;

    private async Task HandleValidSubmit()
    {
        loading = true;

        HttpResponseMessage response = null;

        if (person.Id > 0)
        {
            response = await client.PutAsync("api/persons", JsonContent.Create(person));
        }
        else
        {
            response = await client.PostAsync("api/persons", JsonContent.Create(person));
        }

        result = await response.Content.ReadFromJsonAsync<Result<Person>>();

        if (result.IsValid)
        {
            person = result.Item;
        }

        loading = false;
    }
}

